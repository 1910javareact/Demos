package com.revature.models;

import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@Table(name = "caves", schema = "bears_schema")
@Entity
@JsonFilter("depth_4")
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
public class Cave {

	@Id
	@Column(name = "cave_id")
	@GeneratedValue(strategy = GenerationType.IDENTITY)//to tell hibernate that it is and how it is auto generated by the db
	private int id;
	
	@Column(name = "cave_type")
	private String type;
	
	@OneToMany(mappedBy = "cave")
	private List<Bear> inhabitants;

	public Cave(int id, String type, List<Bear> inhabitants) {
		super();
		this.id = id;
		this.type = type;
		this.inhabitants = inhabitants;
	}

	public Cave() {
		super();
		// TODO Auto-generated constructor stub
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public List<Bear> getInhabitants() {
		return inhabitants;
	}

	public void setInhabitants(List<Bear> inhabitants) {
		this.inhabitants = inhabitants;
	}

	@Override
	public String toString() {
		return "Cave [id=" + id + ", type=" + type + ", inhabitants=" + inhabitants + "]";
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		result = prime * result + ((inhabitants == null) ? 0 : inhabitants.hashCode());
		result = prime * result + ((type == null) ? 0 : type.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Cave other = (Cave) obj;
		if (id != other.id)
			return false;
		if (inhabitants == null) {
			if (other.inhabitants != null)
				return false;
		} else if (!inhabitants.equals(other.inhabitants))
			return false;
		if (type == null) {
			if (other.type != null)
				return false;
		} else if (!type.equals(other.type))
			return false;
		return true;
	}


	
}
